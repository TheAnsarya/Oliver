// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oliver.Data;

namespace Oliver.Data.Migrations
{
    [DbContext(typeof(OliverContext))]
    partial class OliverContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("Oliver.Domain.DataFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BasePath")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastHashAttempt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastVerifiedAttempt")
                        .HasColumnType("TEXT");

                    b.Property<string>("MD5")
                        .HasColumnType("TEXT");

                    b.Property<string>("SHA1")
                        .HasColumnType("TEXT");

                    b.Property<string>("SHA256")
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Verified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DataFiles");
                });

            modelBuilder.Entity("Oliver.Domain.GenreString", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MovieId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("GenreStrings");
                });

            modelBuilder.Entity("Oliver.Domain.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BackgroundImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackgroundImageOriginal")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateUploaded")
                        .HasColumnType("TEXT");

                    b.Property<long>("DateUploadedUnix")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DescriptionFull")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImdbCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("LargeCoverImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediumCoverImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("MpaRating")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rating")
                        .HasColumnType("TEXT");

                    b.Property<int>("Runtime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmallCoverImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Synopsis")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleEnglish")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleLong")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.Property<string>("YtTrailerCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("YtsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Oliver.Domain.TorrentDataFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DataFileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .HasColumnType("TEXT");

                    b.Property<string>("Folder")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastFindAttempt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastVerifiedAttempt")
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubPath")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TorrentFileId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Verified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DataFileId")
                        .IsUnique();

                    b.HasIndex("TorrentFileId");

                    b.ToTable("TorrentDataFiles");
                });

            modelBuilder.Entity("Oliver.Domain.TorrentFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AnalyzedStatus")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMultiFile")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MD5")
                        .HasColumnType("TEXT");

                    b.Property<int>("PieceSize")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Pieces")
                        .HasColumnType("BLOB");

                    b.Property<string>("SHA1")
                        .HasColumnType("TEXT");

                    b.Property<string>("SHA256")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TorrentFiles");
                });

            modelBuilder.Entity("Oliver.Domain.TorrentInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Current")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateUploaded")
                        .HasColumnType("TEXT");

                    b.Property<long>("DateUploadedUnix")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hash")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MovieId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Quality")
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .HasColumnType("TEXT");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TorrentFileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("TorrentFileId")
                        .IsUnique();

                    b.ToTable("TorrentInfos");
                });

            modelBuilder.Entity("Oliver.Domain.GenreString", b =>
                {
                    b.HasOne("Oliver.Domain.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Oliver.Domain.TorrentDataFile", b =>
                {
                    b.HasOne("Oliver.Domain.DataFile", "DataFile")
                        .WithOne("TorrentDataFile")
                        .HasForeignKey("Oliver.Domain.TorrentDataFile", "DataFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Oliver.Domain.TorrentFile", "TorrentFile")
                        .WithMany("TorrentDataFiles")
                        .HasForeignKey("TorrentFileId");

                    b.Navigation("DataFile");

                    b.Navigation("TorrentFile");
                });

            modelBuilder.Entity("Oliver.Domain.TorrentInfo", b =>
                {
                    b.HasOne("Oliver.Domain.Movie", "Movie")
                        .WithMany("Torrents")
                        .HasForeignKey("MovieId");

                    b.HasOne("Oliver.Domain.TorrentFile", "TorrentFile")
                        .WithOne("Info")
                        .HasForeignKey("Oliver.Domain.TorrentInfo", "TorrentFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("TorrentFile");
                });

            modelBuilder.Entity("Oliver.Domain.DataFile", b =>
                {
                    b.Navigation("TorrentDataFile");
                });

            modelBuilder.Entity("Oliver.Domain.Movie", b =>
                {
                    b.Navigation("Genres");

                    b.Navigation("Torrents");
                });

            modelBuilder.Entity("Oliver.Domain.TorrentFile", b =>
                {
                    b.Navigation("Info");

                    b.Navigation("TorrentDataFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
